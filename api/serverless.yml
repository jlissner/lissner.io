service: lissner-family-api

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  environment:
    STAGE: ${self:provider.stage}
    JWT_SECRET: ${env:JWT_SECRET}
    AWS_S3_BUCKET: ${env:AWS_S3_BUCKET}
    AWS_SES_REGION: ${env:AWS_SES_REGION}
    AWS_SES_FROM_EMAIL: ${env:AWS_SES_FROM_EMAIL}
    FRONTEND_URL: ${env:FRONTEND_URL}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:*:table/lissner-*"
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
        - s3:DeleteObject
      Resource:
        - "arn:aws:s3:::${env:AWS_S3_BUCKET}/*"
    - Effect: Allow
      Action:
        - ses:SendEmail
        - ses:SendRawEmail
      Resource: "*"

functions:
  api:
    handler: index.handler
    events:
      - http:
          path: /{proxy+}
          method: ANY
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Requested-With

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: lissner-users-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            BillingMode: PAY_PER_REQUEST
        BillingMode: PAY_PER_REQUEST

    PhotosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: lissner-photos-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: uploadedAt
            AttributeType: S
          - AttributeName: photoType
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: UploadedAtIndex
            KeySchema:
              - AttributeName: photoType
                KeyType: HASH
              - AttributeName: uploadedAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            BillingMode: PAY_PER_REQUEST
        BillingMode: PAY_PER_REQUEST

# Whitelist functionality now handled by Users table

    MagicLinksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: lissner-magic-links-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: token
            AttributeType: S
        KeySchema:
          - AttributeName: token
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          AttributeName: expiresAt
          Enabled: true

package:
  patterns:
    - '!../node_modules/.cache/**'
    - '!../ui/**'
    - '!../.git/**'
    - '!../*.md'
  individually: false

plugins:
  - serverless-offline 